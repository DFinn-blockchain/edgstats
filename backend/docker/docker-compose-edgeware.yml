version: '3.7'

services:
  #
  # Hasura
  #
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    ports:
      - '8082:8080'
    volumes:
      - '../hasura/metadata:/hasura-metadata'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: 'postgres://polkastats:polkastats@postgres:5432/polkastats'
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to 'false' to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: 'startup, http-log, webhook-log, websocket-log, query-log'
      HASURA_GRAPHQL_CORS_DOMAIN: http://localhost:3000
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
  
  #
  # Block crawler
  #
  crawler:
    image: crawler:latest
    build:
      context: ../
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - 'postgres'

    restart: always
    environment:
      NODE_ENV: 'production'
      NODE_OPTIONS: '--max-old-space-size=8192'
      WS_PROVIDER_URL: 'wss://edgeware.jelliedowl.net'
      SUBSTRATE_NETWORK: 'edgeware'
      API_CUSTOM_TYPES: 'edgeware_custom_types.json'
      # RANKING_DISABLE: 'true'
      # ACTIVE_ACCOUNTS_DISABLE: 'true'
      # BLOCK_LISTENER_DISABLE: 'true'
      # BLOCK_FINALIZER_DISABLE: 'true'
      # BLOCK_HARVESTER_DISABLE: 'true'
      NODE_PG_FORCE_NATIVE: 'true'
      #
      #   Available modes:
      #
      #   chunks:     Process batchs of 'BLOCK_HARVESTER_CHUNK_SIZE' blocks in parallel (faster)
      #   sequential: Slower but less resource-intensive
      #
      BLOCK_HARVESTER_MODE: 'chunks'
      BLOCK_HARVESTER_CHUNK_SIZE: '10'
      BACKEND_STATS_PRECISION: '2'
      LOG_LEVEL: 'info'
      BLOCK_HARVESTER_START_DELAY_MS: '120000' # 2 min
      BLOCK_FINALIZER_START_DELAY_MS: '60000' # 1 min
      RANKING_START_DELAY_MS: '1800000' # 30 min
      ACTIVE_ACCOUNTS_START_DELAY_MS: '300000' # 5 min
      ACTIVE_ACCOUNTS_CHUNK_SIZE: '100'
      SENTRY_DSN: ${SENTRY_DSN}

  #
  # API
  #
  api:
    image: api:latest
    ports:
      - '8000:8000'
    build:
      context: ../../api
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
    restart: always
    environment:
      - NODE_ENV=production
      - NODE_PORT=8000

#
# Persistent volumes
#
volumes:
  db-data: {}
  substrate-data: {}
